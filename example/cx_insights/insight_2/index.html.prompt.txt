claude-3-5-sonnet-20240620

# Example Project
This is the example project which has 3 main files "server.py", "index.html" and "run.sh".
Here are their contents:

## server.py
```python

import sqlite3
import threading
import time
import traceback
import csv
import io
from typing import Callable

from flask import Flask, jsonify, request, send_from_directory, send_file
from flask_cors import CORS
from flask_socketio import SocketIO
from engy import airbnb_review_agent, query_llm

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

REVIEWS_DATABASE = 'customer_reviews.db'
INSIGHTS_DATABASE = 'cx_insights.db'
ENTRIES_PER_PAGE = 10

# Data generation control
data_generation_active = False
data_generation_thread = None

def get_db_connection(database):
    conn = sqlite3.connect(database)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection(REVIEWS_DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS customer_reviews
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         name TEXT,
                         date TEXT,
                         platform TEXT,
                         review_content TEXT,
                         timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()

    with get_db_connection(INSIGHTS_DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS cx_insights
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         summary TEXT,
                         action TEXT,
                         timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()

def generate_random_review():
    review_data = None

    def review_producer(review):
        nonlocal review_data
        review_data = review

    airbnb_review_agent(review_producer)
    return review_data

INSIGHT_SYSTEM_PROMPT = '''You are an expert CX (Customer Experience) analyst for Airbnb. Your task is to analyze customer reviews and extract valuable insights to improve the product and increase ROI (Return on Investment).

For each review, you should:
1. Identify the main issue or concern raised by the customer.
2. Summarize the issue in a short, concise sentence.
3. Suggest an actionable step to address the issue and improve the customer experience.

Your output should be in the following format:
<INSIGHT>
Summary: [One short sentence summarizing the issue]
Action: [Suggested action to address the issue]
</INSIGHT>'''

def analyze_reviews_and_generate_insights(reviews):
    insights = []
    
    for review in reviews:
        query = f"Analyze the following Airbnb review and extract an insight:\n\n{review['review_content']}"
        
        responses, _ = query_llm(query, system_message=INSIGHT_SYSTEM_PROMPT,
                                 model="claude-3-haiku-20240307", temperature=0.2, filename='cx_insight_agent')
        
        insight_text = responses[0]
        start_tag = "<INSIGHT>"
        end_tag = "</INSIGHT>"
        
        if start_tag in insight_text and end_tag in insight_text:
            insight_content = insight_text[insight_text.find(start_tag) + len(start_tag):insight_text.find(end_tag)].strip()
            summary = insight_content.split("Summary:")[1].split("Action:")[0].strip()
            action = insight_content.split("Action:")[1].strip()
            insights.append({"summary": summary, "action": action})
    
    return insights

def store_insights(insights):
    with get_db_connection(INSIGHTS_DATABASE) as conn:
        c = conn.cursor()
        for insight in insights:
            c.execute("INSERT INTO cx_insights (summary, action) VALUES (?, ?)",
                      (insight['summary'], insight['action']))
        conn.commit()

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/api/reviews', methods=['GET'])
def get_reviews():
    page = request.args.get('page', 1, type=int)
    offset = (page - 1) * ENTRIES_PER_PAGE

    with get_db_connection(REVIEWS_DATABASE) as conn:
        total_reviews = conn.execute("SELECT COUNT(*) FROM customer_reviews").fetchone()[0]
        reviews = conn.execute("SELECT * FROM customer_reviews ORDER BY timestamp DESC LIMIT ? OFFSET ?",
                               (ENTRIES_PER_PAGE, offset)).fetchall()

    return jsonify({
        'reviews': [dict(review) for review in reviews],
        'total_reviews': total_reviews,
        'total_pages': (total_reviews + ENTRIES_PER_PAGE - 1) // ENTRIES_PER_PAGE
    })

@app.route('/api/reviews', methods=['POST'])
def add_review():
    data = request.json
    if not data or 'name' not in data or 'date' not in data or 'platform' not in data or 'review_content' not in data:
        return jsonify({'error': 'Invalid data'}), 400

    with get_db_connection(REVIEWS_DATABASE) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO customer_reviews (name, date, platform, review_content) VALUES (?, ?, ?, ?)",
                  (data['name'], data['date'], data['platform'], data['review_content']))
        conn.commit()
        new_id = c.lastrowid

        new_review = c.execute("SELECT * FROM customer_reviews WHERE id = ?", (new_id,)).fetchone()

    socketio.emit('new_review', dict(new_review))

    return jsonify({'id': new_id, 'message': 'Review added successfully'}), 201

@app.route('/api/generate_review', methods=['POST'])
def generate_review():
    review = generate_random_review()
    
    with get_db_connection(REVIEWS_DATABASE) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO customer_reviews (name, date, platform, review_content) VALUES (?, ?, ?, ?)",
                  (review['name'], review['date'], review['platform'], review['review_content']))
        conn.commit()
        new_id = c.lastrowid

        new_review = c.execute("SELECT * FROM customer_reviews WHERE id = ?", (new_id,)).fetchone()

    socketio.emit('new_review', dict(new_review))

    return jsonify({'id': new_id, 'message': 'Random review generated and added successfully'}), 201

@app.route('/api/generate_insights', methods=['POST'])
def generate_insights():
    with get_db_connection(REVIEWS_DATABASE) as conn:
        reviews = conn.execute("SELECT * FROM customer_reviews ORDER BY RANDOM() LIMIT 10").fetchall()
    
    insights = analyze_reviews_and_generate_insights([dict(review) for review in reviews])
    store_insights(insights)
    
    return jsonify({'message': f'{len(insights)} insights generated and stored successfully'}), 201

@app.route('/api/insights', methods=['GET'])
def get_insights():
    page = request.args.get('page', 1, type=int)
    offset = (page - 1) * ENTRIES_PER_PAGE

    with get_db_connection(INSIGHTS_DATABASE) as conn:
        total_insights = conn.execute("SELECT COUNT(*) FROM cx_insights").fetchone()[0]
        insights = conn.execute("SELECT * FROM cx_insights ORDER BY timestamp DESC LIMIT ? OFFSET ?",
                                (ENTRIES_PER_PAGE, offset)).fetchall()

    return jsonify({
        'insights': [dict(insight) for insight in insights],
        'total_insights': total_insights,
        'total_pages': (total_insights + ENTRIES_PER_PAGE - 1) // ENTRIES_PER_PAGE
    })

@app.route('/api/export_csv', methods=['GET'])
def export_csv():
    with get_db_connection(REVIEWS_DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM customer_reviews ORDER BY timestamp DESC")
        rows = cursor.fetchall()

    output = io.StringIO()
    writer = csv.writer(output)
    
    writer.writerow(['id', 'name', 'date', 'platform', 'review_content', 'timestamp'])
    
    for row in rows:
        writer.writerow(row)

    output.seek(0)
    return send_file(
        io.BytesIO(output.getvalue().encode('utf-8')),
        mimetype='text/csv',
        as_attachment=True,
        download_name='customer_reviews.csv'
    )

@socketio.on('connect')
def handle_connect():
    print('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

if __name__ == '__main__':
    init_db()
    port = 6376
    print(f"Server running on port {port}")
    socketio.run(app, host='0.0.0.0', port=port, debug=True)

```

## index.html
```html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Airbnb Review and Insights Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        .table-container {
            max-height: 70vh;
            overflow-y: auto;
        }
        #reviewTable th, #reviewTable td, #insightsTable th, #insightsTable td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }
        #reviewTable td.expanded, #insightsTable td.expanded {
            white-space: normal;
            max-width: none;
        }
        .expand-btn {
            cursor: pointer;
            user-select: none;
            transition: transform 0.3s ease;
        }
        .expand-btn.expanded {
            transform: rotate(180deg);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <header class="bg-gray-600 text-white shadow-lg">
        <div class="container mx-auto px-4 py-6 flex justify-between items-center">
            <h1 class="text-3xl font-bold">Airbnb Review and Insights Manager</h1>
            <div class="flex items-center">
                <button id="generateReviewBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg shadow hover:bg-green-600 transition duration-300 ease-in-out mr-2">
                    Generate Airbnb Review
                </button>
                <button id="generateInsightsBtn" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-300 ease-in-out mr-2">
                    Generate Insights
                </button>
                <button id="refreshBtn" class="bg-white text-indigo-600 px-4 py-2 rounded-lg shadow hover:bg-indigo-100 transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                    </svg>
                    Refresh
                </button>
                <button id="exportCsvBtn" class="bg-yellow-500 text-white px-4 py-2 rounded-lg shadow hover:bg-yellow-600 transition duration-300 ease-in-out">
                    Export CSV
                </button>
            </div>
        </div>
    </header>
    <main class="container mx-auto px-4 py-8">
        <div id="newReviewsAlert" class="hidden bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-4" role="alert">
            <p class="font-bold">New reviews available!</p>
            <p>Click the button below to load the latest reviews.</p>
            <button id="loadNewReviewsBtn" class="mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Load New Reviews
            </button>
        </div>
        <div class="mb-8">
            <h2 class="text-2xl font-bold mb-4">Customer Reviews</h2>
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="table-container">
                    <table id="reviewTable" class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expand</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Platform</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Review Content</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- Table rows will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="mt-4 flex justify-between items-center">
                <div>
                    <span id="reviewPageInfo" class="text-sm text-gray-600"></span>
                </div>
                <div>
                    <button id="reviewPrevBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out mr-2">Previous</button>
                    <button id="reviewNextBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out">Next</button>
                </div>
            </div>
        </div>
        <div>
            <h2 class="text-2xl font-bold mb-4">CX Insights</h2>
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="table-container">
                    <table id="insightsTable" class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expand</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Summary</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- Table rows will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="mt-4 flex justify-between items-center">
                <div>
                    <span id="insightPageInfo" class="text-sm text-gray-600"></span>
                </div>
                <div>
                    <button id="insightPrevBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out mr-2">Previous</button>
                    <button id="insightNextBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out">Next</button>
                </div>
            </div>
        </div>
        <div id="loadingSpinner" class="hidden fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
    </main>
    <script>
        const API_URL = `http://${window.location.hostname}:6376/api`;
        const loadingSpinner = document.getElementById('loadingSpinner');
        const reviewPageInfo = document.getElementById('reviewPageInfo');
        const reviewPrevBtn = document.getElementById('reviewPrevBtn');
        const reviewNextBtn = document.getElementById('reviewNextBtn');
        const insightPageInfo = document.getElementById('insightPageInfo');
        const insightPrevBtn = document.getElementById('insightPrevBtn');
        const insightNextBtn = document.getElementById('insightNextBtn');
        const generateReviewBtn = document.getElementById('generateReviewBtn');
        const generateInsightsBtn = document.getElementById('generateInsightsBtn');
        const newReviewsAlert = document.getElementById('newReviewsAlert');
        const loadNewReviewsBtn = document.getElementById('loadNewReviewsBtn');
        const exportCsvBtn = document.getElementById('exportCsvBtn');
        let reviewCurrentPage = 1;
        let reviewTotalPages = 1;
        let reviewTotalReviews = 0;
        let insightCurrentPage = 1;
        let insightTotalPages = 1;
        let insightTotalInsights = 0;
        let newReviewsCount = 0;

        const socket = io(`http://${window.location.hostname}:6376`);

        socket.on('connect', () => {
            console.log('Connected to WebSocket');
        });

        socket.on('new_review', (review) => {
            console.log('New review received:', review);
            if (reviewCurrentPage === 1) {
                prependReview(review);
            } else {
                newReviewsCount++;
                showNewReviewsAlert();
            }
            updateTotalReviews(reviewTotalReviews + 1);
        });

        async function fetchReviews(page = 1) {
            try {
                loadingSpinner.classList.remove('hidden');
                const response = await fetch(`${API_URL}/reviews?page=${page}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                updateReviewTable(data.reviews);
                updateReviewPagination(page, data.total_pages, data.total_reviews);
            } catch (error) {
                console.error('Error fetching reviews:', error);
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        }

        async function fetchInsights(page = 1) {
            try {
                loadingSpinner.classList.remove('hidden');
                const response = await fetch(`${API_URL}/insights?page=${page}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                updateInsightTable(data.insights);
                updateInsightPagination(page, data.total_pages, data.total_insights);
            } catch (error) {
                console.error('Error fetching insights:', error);
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        }

        function updateReviewTable(reviews) {
            const tableBody = document.querySelector('#reviewTable tbody');
            tableBody.innerHTML = '';

            reviews.forEach(review => {
                const row = createReviewTableRow(review);
                tableBody.appendChild(row);
            });
        }

        function updateInsightTable(insights) {
            const tableBody = document.querySelector('#insightsTable tbody');
            tableBody.innerHTML = '';

            insights.forEach(insight => {
                const row = createInsightTableRow(insight);
                tableBody.appendChild(row);
            });
        }

        function createReviewTableRow(review) {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 transition duration-150 ease-in-out';
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    <svg class="expand-btn w-5 h-5 text-gray-500 hover:text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${escapeHtml(review.id)}</td>
                <td class="px-6 py-4 text-sm font-medium text-gray-900">${escapeHtml(review.name)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(review.date)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(review.platform)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(review.review_content)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(review.timestamp).toLocaleString()}</td>
            `;

            const expandBtn = row.querySelector('.expand-btn');
            expandBtn.addEventListener('click', () => {
                const cells = row.querySelectorAll('td:not(:first-child)');
                cells.forEach(cell => cell.classList.toggle('expanded'));
                expandBtn.classList.toggle('expanded');
            });

            return row;
        }

        function createInsightTableRow(insight) {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 transition duration-150 ease-in-out';
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    <svg class="expand-btn w-5 h-5 text-gray-500 hover:text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${escapeHtml(insight.id)}</td>
                <td class="px-6 py-4 text-sm font-medium text-gray-900">${escapeHtml(insight.summary)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(insight.action)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(insight.timestamp).toLocaleString()}</td>
            `;

            const expandBtn = row.querySelector('.expand-btn');
            expandBtn.addEventListener('click', () => {
                const cells = row.querySelectorAll('td:not(:first-child)');
                cells.forEach(cell => cell.classList.toggle('expanded'));
                expandBtn.classList.toggle('expanded');
            });

            return row;
        }

        function prependReview(review) {
            const tableBody = document.querySelector('#reviewTable tbody');
            const row = createReviewTableRow(review);
            tableBody.insertBefore(row, tableBody.firstChild);
            
            // Remove the last row if we have more than 10 reviews
            if (tableBody.children.length > 10) {
                tableBody.removeChild(tableBody.lastChild);
            }
        }

        function updateReviewPagination(page, total, reviews) {
            reviewCurrentPage = page;
            reviewTotalPages = total;
            reviewTotalReviews = reviews;
            reviewPageInfo.textContent = `Page ${page} of ${total} (${reviews} total reviews)`;
            reviewPrevBtn.disabled = page === 1;
            reviewNextBtn.disabled = page === total;
        }

        function updateInsightPagination(page, total, insights) {
            insightCurrentPage = page;
            insightTotalPages = total;
            insightTotalInsights = insights;
            insightPageInfo.textContent = `Page ${page} of ${total} (${insights} total insights)`;
            insightPrevBtn.disabled = page === 1;
            insightNextBtn.disabled = page === total;
        }

        function updateTotalReviews(newTotal) {
            reviewTotalReviews = newTotal;
            reviewTotalPages = Math.ceil(reviewTotalReviews / 10);
            reviewPageInfo.textContent = `Page ${reviewCurrentPage} of ${reviewTotalPages} (${reviewTotalReviews} total reviews)`;
            reviewNextBtn.disabled = reviewCurrentPage === reviewTotalPages;
        }

        function showNewReviewsAlert() {
            newReviewsAlert.classList.remove('hidden');
            loadNewReviewsBtn.textContent = `Load ${newReviewsCount} New Reviews`;
        }

        function hideNewReviewsAlert() {
            newReviewsAlert.classList.add('hidden');
            newReviewsCount = 0;
        }

        function escapeHtml(unsafe) {
            if (typeof unsafe === 'number') {
                return unsafe.toString();
            }
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

        async function generateAirbnbReview() {
            try {
                const response = await fetch(`${API_URL}/generate_review`, { method: 'POST' });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Airbnb review generated:', data);
                if (reviewCurrentPage === 1) {
                    fetchReviews(1);
                } else {
                    newReviewsCount++;
                    showNewReviewsAlert();
                }
            } catch (error) {
                console.error('Error generating Airbnb review:', error);
            }
        }

        async function generateInsights() {
            try {
                loadingSpinner.classList.remove('hidden');
                const response = await fetch(`${API_URL}/generate_insights`, { method: 'POST' });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Insights generated:', data);
                fetchInsights(1);
            } catch (error) {
                console.error('Error generating insights:', error);
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        }

        async function exportCsv() {
            try {
                const response = await fetch(`${API_URL}/export_csv`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'airbnb_reviews.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error exporting CSV:', error);
            }
        }

        reviewPrevBtn.addEventListener('click', () => {
            if (reviewCurrentPage > 1) {
                fetchReviews(reviewCurrentPage - 1);
            }
        });

        reviewNextBtn.addEventListener('click', () => {
            if (reviewCurrentPage < reviewTotalPages) {
                fetchReviews(reviewCurrentPage + 1);
            }
        });

        insightPrevBtn.addEventListener('click', () => {
            if (insightCurrentPage > 1) {
                fetchInsights(insightCurrentPage - 1);
            }
        });

        insightNextBtn.addEventListener('click', () => {
            if (insightCurrentPage < insightTotalPages) {
                fetchInsights(insightCurrentPage + 1);
            }
        });

        document.getElementById('refreshBtn').addEventListener('click', () => {
            fetchReviews(reviewCurrentPage);
            fetchInsights(insightCurrentPage);
        });
        generateReviewBtn.addEventListener('click', generateAirbnbReview);
        generateInsightsBtn.addEventListener('click', generateInsights);
        exportCsvBtn.addEventListener('click', exportCsv);

        loadNewReviewsBtn.addEventListener('click', () => {
            fetchReviews(1);
            hideNewReviewsAlert();
        });

        // Initial setup
        fetchReviews();
        fetchInsights();
    </script>
</body>
</html>

```

## run.sh
```bash

#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Create a virtual environment if it doesn't exist
if [ ! -d "venv" ]; then
    echo "Creating virtual environment..."
    python3 -m venv venv
fi

# Activate the virtual environment
source venv/bin/activate

# Upgrade pip
pip install --upgrade pip

# Install required libraries
echo "Installing required libraries..."
pip install Flask flask-cors flask-socketio /data/finae/engy

# Start the server
echo "Starting the Airbnb Review and Insights Manager server..."
python server.py

# Keep the script running
while true; do
    echo "Airbnb Review and Insights Manager server is running on port 6376. Press Ctrl+C to stop."
    sleep 60
done

```

# Objective
Modify and re-generate these files based on new <FEATURE_REQUEST></FEATURE_REQUEST> statements.

# Output
1. Output new "server.py" source code in <SERVER_PYTHON_CODE></SERVER_PYTHON_CODE> block.
2. Output new "index.html" source code in <INDEX_HTML_CODE></INDEX_HTML_CODE> block.
3. Output new "run.sh" source code in <RUN_BASH_CODE></RUN_BASH_CODE> block.

Only output one of them in each conversation round, based on user query.


=== 0: user ===
<FEATURE_REQUEST>
The app is great! Now:
1. Make insighs "Summary" short, like 2-3 words so similar "Summary" can be merged/clustered.
2. Remove "Generate Insights" button, when generate review, auto trigger analysis and insert to insights database.
3. Make similar "Summary" merged and clustered into same entry. And add a counter showing how many reviews fall in under this insight.
</FEATURE_REQUEST>

Generate new "server.py" first. Re-assign a new PORT, to "0.0.0.0:5125".

=== 1: assistant ===
Certainly! I'll modify the "server.py" file to implement the requested features and change the port to 5125. Here's the updated "server.py" code:

<SERVER_PYTHON_CODE>
import sqlite3
import threading
import time
import traceback
import csv
import io
from typing import Callable

from flask import Flask, jsonify, request, send_from_directory, send_file
from flask_cors import CORS
from flask_socketio import SocketIO
from engy import airbnb_review_agent, query_llm

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

REVIEWS_DATABASE = 'customer_reviews.db'
INSIGHTS_DATABASE = 'cx_insights.db'
ENTRIES_PER_PAGE = 10

def get_db_connection(database):
    conn = sqlite3.connect(database)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection(REVIEWS_DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS customer_reviews
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         name TEXT,
                         date TEXT,
                         platform TEXT,
                         review_content TEXT,
                         timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()

    with get_db_connection(INSIGHTS_DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS cx_insights
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         summary TEXT,
                         action TEXT,
                         count INTEGER DEFAULT 1,
                         timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()

def generate_random_review():
    review_data = None

    def review_producer(review):
        nonlocal review_data
        review_data = review

    airbnb_review_agent(review_producer)
    return review_data

INSIGHT_SYSTEM_PROMPT = '''You are an expert CX (Customer Experience) analyst for Airbnb. Your task is to analyze customer reviews and extract valuable insights to improve the product and increase ROI (Return on Investment).

For each review, you should:
1. Identify the main issue or concern raised by the customer.
2. Summarize the issue in a very short, 2-3 word phrase.
3. Suggest an actionable step to address the issue and improve the customer experience.

Your output should be in the following format:
<INSIGHT>
Summary: [2-3 word phrase summarizing the issue]
Action: [Suggested action to address the issue]
</INSIGHT>'''

def analyze_review_and_generate_insight(review):
    query = f"Analyze the following Airbnb review and extract an insight:\n\n{review['review_content']}"
    
    responses, _ = query_llm(query, system_message=INSIGHT_SYSTEM_PROMPT,
                             model="claude-3-haiku-20240307", temperature=0.2, filename='cx_insight_agent')
    
    insight_text = responses[0]
    start_tag = "<INSIGHT>"
    end_tag = "</INSIGHT>"
    
    if start_tag in insight_text and end_tag in insight_text:
        insight_content = insight_text[insight_text.find(start_tag) + len(start_tag):insight_text.find(end_tag)].strip()
        summary = insight_content.split("Summary:")[1].split("Action:")[0].strip()
        action = insight_content.split("Action:")[1].strip()
        return {"summary": summary, "action": action}
    
    return None

def store_or_update_insight(insight):
    with get_db_connection(INSIGHTS_DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT * FROM cx_insights WHERE summary = ?", (insight['summary'],))
        existing_insight = c.fetchone()
        
        if existing_insight:
            c.execute("UPDATE cx_insights SET count = count + 1, action = ? WHERE id = ?",
                      (insight['action'], existing_insight['id']))
        else:
            c.execute("INSERT INTO cx_insights (summary, action) VALUES (?, ?)",
                      (insight['summary'], insight['action']))
        conn.commit()

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/api/reviews', methods=['GET'])
def get_reviews():
    page = request.args.get('page', 1, type=int)
    offset = (page - 1) * ENTRIES_PER_PAGE

    with get_db_connection(REVIEWS_DATABASE) as conn:
        total_reviews = conn.execute("SELECT COUNT(*) FROM customer_reviews").fetchone()[0]
        reviews = conn.execute("SELECT * FROM customer_reviews ORDER BY timestamp DESC LIMIT ? OFFSET ?",
                               (ENTRIES_PER_PAGE, offset)).fetchall()

    return jsonify({
        'reviews': [dict(review) for review in reviews],
        'total_reviews': total_reviews,
        'total_pages': (total_reviews + ENTRIES_PER_PAGE - 1) // ENTRIES_PER_PAGE
    })

@app.route('/api/reviews', methods=['POST'])
def add_review():
    data = request.json
    if not data or 'name' not in data or 'date' not in data or 'platform' not in data or 'review_content' not in data:
        return jsonify({'error': 'Invalid data'}), 400

    with get_db_connection(REVIEWS_DATABASE) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO customer_reviews (name, date, platform, review_content) VALUES (?, ?, ?, ?)",
                  (data['name'], data['date'], data['platform'], data['review_content']))
        conn.commit()
        new_id = c.lastrowid

        new_review = c.execute("SELECT * FROM customer_reviews WHERE id = ?", (new_id,)).fetchone()

    insight = analyze_review_and_generate_insight(dict(new_review))
    if insight:
        store_or_update_insight(insight)

    socketio.emit('new_review', dict(new_review))

    return jsonify({'id': new_id, 'message': 'Review added successfully'}), 201

@app.route('/api/generate_review', methods=['POST'])
def generate_review():
    review = generate_random_review()
    
    with get_db_connection(REVIEWS_DATABASE) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO customer_reviews (name, date, platform, review_content) VALUES (?, ?, ?, ?)",
                  (review['name'], review['date'], review['platform'], review['review_content']))
        conn.commit()
        new_id = c.lastrowid

        new_review = c.execute("SELECT * FROM customer_reviews WHERE id = ?", (new_id,)).fetchone()

    insight = analyze_review_and_generate_insight(dict(new_review))
    if insight:
        store_or_update_insight(insight)

    socketio.emit('new_review', dict(new_review))

    return jsonify({'id': new_id, 'message': 'Random review generated and added successfully'}), 201

@app.route('/api/insights', methods=['GET'])
def get_insights():
    page = request.args.get('page', 1, type=int)
    offset = (page - 1) * ENTRIES_PER_PAGE

    with get_db_connection(INSIGHTS_DATABASE) as conn:
        total_insights = conn.execute("SELECT COUNT(*) FROM cx_insights").fetchone()[0]
        insights = conn.execute("SELECT * FROM cx_insights ORDER BY count DESC, timestamp DESC LIMIT ? OFFSET ?",
                                (ENTRIES_PER_PAGE, offset)).fetchall()

    return jsonify({
        'insights': [dict(insight) for insight in insights],
        'total_insights': total_insights,
        'total_pages': (total_insights + ENTRIES_PER_PAGE - 1) // ENTRIES_PER_PAGE
    })

@app.route('/api/export_csv', methods=['GET'])
def export_csv():
    with get_db_connection(REVIEWS_DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM customer_reviews ORDER BY timestamp DESC")
        rows = cursor.fetchall()

    output = io.StringIO()
    writer = csv.writer(output)
    
    writer.writerow(['id', 'name', 'date', 'platform', 'review_content', 'timestamp'])
    
    for row in rows:
        writer.writerow(row)

    output.seek(0)
    return send_file(
        io.BytesIO(output.getvalue().encode('utf-8')),
        mimetype='text/csv',
        as_attachment=True,
        download_name='customer_reviews.csv'
    )

@socketio.on('connect')
def handle_connect():
    print('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

if __name__ == '__main__':
    init_db()
    port = 5125
    print(f"Server running on port {port}")
    socketio.run(app, host='0.0.0.0', port=port, debug=True)
</SERVER_PYTHON_CODE>

This updated "server.py" file includes the following changes:

1. The INSIGHT_SYSTEM_PROMPT has been modified to request a 2-3 word phrase for the summary.
2. The "Generate Insights" functionality has been removed. Instead, insights are automatically generated and stored when a new review is added or generated.
3. The `analyze_review_and_generate_insight` function has been added to process a single review and generate an insight.
4. The `store_or_update_insight` function has been added to merge similar summaries and update the count.
5. The `/api/reviews` POST route and `/api/generate_review` route now automatically generate and store insights for new reviews.
6. The `/api/insights` GET route now orders insights by count (descending) and then by timestamp.
7. The port has been changed to 5125 as requested.

These changes implement the requested features while maintaining the overall structure and functionality of the application.
=== 2: user ===
Generate new "index.html"

=== Reply 0 ===
Certainly! Here's the updated "index.html" file that reflects the changes we made to the server and implements the new features:

<INDEX_HTML_CODE>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Airbnb Review and Insights Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        .table-container {
            max-height: 70vh;
            overflow-y: auto;
        }
        #reviewTable th, #reviewTable td, #insightsTable th, #insightsTable td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }
        #reviewTable td.expanded, #insightsTable td.expanded {
            white-space: normal;
            max-width: none;
        }
        .expand-btn {
            cursor: pointer;
            user-select: none;
            transition: transform 0.3s ease;
        }
        .expand-btn.expanded {
            transform: rotate(180deg);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <header class="bg-gray-600 text-white shadow-lg">
        <div class="container mx-auto px-4 py-6 flex justify-between items-center">
            <h1 class="text-3xl font-bold">Airbnb Review and Insights Manager</h1>
            <div class="flex items-center">
                <button id="generateReviewBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg shadow hover:bg-green-600 transition duration-300 ease-in-out mr-2">
                    Generate Airbnb Review
                </button>
                <button id="refreshBtn" class="bg-white text-indigo-600 px-4 py-2 rounded-lg shadow hover:bg-indigo-100 transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                    </svg>
                    Refresh
                </button>
                <button id="exportCsvBtn" class="bg-yellow-500 text-white px-4 py-2 rounded-lg shadow hover:bg-yellow-600 transition duration-300 ease-in-out">
                    Export CSV
                </button>
            </div>
        </div>
    </header>
    <main class="container mx-auto px-4 py-8">
        <div id="newReviewsAlert" class="hidden bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-4" role="alert">
            <p class="font-bold">New reviews available!</p>
            <p>Click the button below to load the latest reviews.</p>
            <button id="loadNewReviewsBtn" class="mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Load New Reviews
            </button>
        </div>
        <div class="mb-8">
            <h2 class="text-2xl font-bold mb-4">Customer Reviews</h2>
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="table-container">
                    <table id="reviewTable" class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expand</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Platform</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Review Content</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- Table rows will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="mt-4 flex justify-between items-center">
                <div>
                    <span id="reviewPageInfo" class="text-sm text-gray-600"></span>
                </div>
                <div>
                    <button id="reviewPrevBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out mr-2">Previous</button>
                    <button id="reviewNextBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out">Next</button>
                </div>
            </div>
        </div>
        <div>
            <h2 class="text-2xl font-bold mb-4">CX Insights</h2>
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="table-container">
                    <table id="insightsTable" class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expand</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Summary</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Count</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- Table rows will be dynamically inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="mt-4 flex justify-between items-center">
                <div>
                    <span id="insightPageInfo" class="text-sm text-gray-600"></span>
                </div>
                <div>
                    <button id="insightPrevBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out mr-2">Previous</button>
                    <button id="insightNextBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-700 transition duration-300 ease-in-out">Next</button>
                </div>
            </div>
        </div>
        <div id="loadingSpinner" class="hidden fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
    </main>
    <script>
        const API_URL = `http://${window.location.hostname}:5125/api`;
        const loadingSpinner = document.getElementById('loadingSpinner');
        const reviewPageInfo = document.getElementById('reviewPageInfo');
        const reviewPrevBtn = document.getElementById('reviewPrevBtn');
        const reviewNextBtn = document.getElementById('reviewNextBtn');
        const insightPageInfo = document.getElementById('insightPageInfo');
        const insightPrevBtn = document.getElementById('insightPrevBtn');
        const insightNextBtn = document.getElementById('insightNextBtn');
        const generateReviewBtn = document.getElementById('generateReviewBtn');
        const newReviewsAlert = document.getElementById('newReviewsAlert');
        const loadNewReviewsBtn = document.getElementById('loadNewReviewsBtn');
        const exportCsvBtn = document.getElementById('exportCsvBtn');
        let reviewCurrentPage = 1;
        let reviewTotalPages = 1;
        let reviewTotalReviews = 0;
        let insightCurrentPage = 1;
        let insightTotalPages = 1;
        let insightTotalInsights = 0;
        let newReviewsCount = 0;

        const socket = io(`http://${window.location.hostname}:5125`);

        socket.on('connect', () => {
            console.log('Connected to WebSocket');
        });

        socket.on('new_review', (review) => {
            console.log('New review received:', review);
            if (reviewCurrentPage === 1) {
                prependReview(review);
            } else {
                newReviewsCount++;
                showNewReviewsAlert();
            }
            updateTotalReviews(reviewTotalReviews + 1);
        });

        async function fetchReviews(page = 1) {
            try {
                loadingSpinner.classList.remove('hidden');
                const response = await fetch(`${API_URL}/reviews?page=${page}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                updateReviewTable(data.reviews);
                updateReviewPagination(page, data.total_pages, data.total_reviews);
            } catch (error) {
                console.error('Error fetching reviews:', error);
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        }

        async function fetchInsights(page = 1) {
            try {
                loadingSpinner.classList.remove('hidden');
                const response = await fetch(`${API_URL}/insights?page=${page}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                updateInsightTable(data.insights);
                updateInsightPagination(page, data.total_pages, data.total_insights);
            } catch (error) {
                console.error('Error fetching insights:', error);
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        }

        function updateReviewTable(reviews) {
            const tableBody = document.querySelector('#reviewTable tbody');
            tableBody.innerHTML = '';

            reviews.forEach(review => {
                const row = createReviewTableRow(review);
                tableBody.appendChild(row);
            });
        }

        function updateInsightTable(insights) {
            const tableBody = document.querySelector('#insightsTable tbody');
            tableBody.innerHTML = '';

            insights.forEach(insight => {
                const row = createInsightTableRow(insight);
                tableBody.appendChild(row);
            });
        }

        function createReviewTableRow(review) {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 transition duration-150 ease-in-out';
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    <svg class="expand-btn w-5 h-5 text-gray-500 hover:text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${escapeHtml(review.id)}</td>
                <td class="px-6 py-4 text-sm font-medium text-gray-900">${escapeHtml(review.name)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(review.date)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(review.platform)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(review.review_content)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(review.timestamp).toLocaleString()}</td>
            `;

            const expandBtn = row.querySelector('.expand-btn');
            expandBtn.addEventListener('click', () => {
                const cells = row.querySelectorAll('td:not(:first-child)');
                cells.forEach(cell => cell.classList.toggle('expanded'));
                expandBtn.classList.toggle('expanded');
            });

            return row;
        }

        function createInsightTableRow(insight) {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 transition duration-150 ease-in-out';
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    <svg class="expand-btn w-5 h-5 text-gray-500 hover:text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${escapeHtml(insight.id)}</td>
                <td class="px-6 py-4 text-sm font-medium text-gray-900">${escapeHtml(insight.summary)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(insight.action)}</td>
                <td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(insight.count)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(insight.timestamp).toLocaleString()}</td>
            `;

            const expandBtn = row.querySelector('.expand-btn');
            expandBtn.addEventListener('click', () => {
                const cells = row.querySelectorAll('td:not(:first-child)');
                cells.forEach(cell => cell.classList.toggle('expanded'));
                expandBtn.classList.toggle('expanded');
            });

            return row;
        }

        function prependReview(review) {
            const tableBody = document.querySelector('#reviewTable tbody');
            const row = createReviewTableRow(review);
            tableBody.insertBefore(row, tableBody.firstChild);
            
            // Remove the last row if we have more than 10 reviews
            if (tableBody.children.length > 10) {
                tableBody.removeChild(tableBody.lastChild);
            }
        }

        function updateReviewPagination(page, total, reviews) {
            reviewCurrentPage = page;
            reviewTotalPages = total;
            reviewTotalReviews = reviews;
            reviewPageInfo.textContent = `Page ${page} of ${total} (${reviews} total reviews)`;
            reviewPrevBtn.disabled = page === 1;
            reviewNextBtn.disabled = page === total;
        }

        function updateInsightPagination(page, total, insights) {
            insightCurrentPage = page;
            insightTotalPages = total;
            insightTotalInsights = insights;
            insightPageInfo.textContent = `Page ${page} of ${total} (${insights} total insights)`;
            insightPrevBtn.disabled = page === 1;
            insightNextBtn.disabled = page === total;
        }

        function updateTotalReviews(newTotal) {
            reviewTotalReviews = newTotal;
            reviewTotalPages = Math.ceil(reviewTotalReviews / 10);
            reviewPageInfo.textContent = `Page ${reviewCurrentPage} of ${reviewTotalPages} (${reviewTotalReviews} total reviews)`;
            reviewNextBtn.disabled = reviewCurrentPage === reviewTotalPages;
        }

        function showNewReviewsAlert() {
            newReviewsAlert.classList.remove('hidden');
            loadNewReviewsBtn.textContent = `Load ${newReviewsCount} New Reviews`;
        }

        function hideNewReviewsAlert() {
            newReviewsAlert.classList.add('hidden');
            newReviewsCount = 0;
        }

        function escapeHtml(unsafe) {
            if (typeof unsafe === 'number') {
                return unsafe.toString();
            }
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

        async function generateAirbnbReview() {
            try {
                loadingSpinner.classList.remove('hidden');
                const response = await fetch(`${API_URL}/generate_review`, { method: 'POST' });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Airbnb review generated:', data);
                if (reviewCurrentPage === 1) {
                    fetchReviews(1);
                    fetchInsights(1);
                } else {
                    newReviewsCount++;
                    showNewReviewsAlert();
                }
            } catch (error) {
                console.error('Error generating Airbnb review:', error);
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        }

        async function exportCsv() {
            try {
                const response = await fetch(`${API_URL}/export_csv`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'airbnb_reviews.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error exporting CSV:', error);
            }
        }

        reviewPrevBtn.addEventListener('click', () => {
            if (reviewCurrentPage > 1) {
                fetchReviews(reviewCurrentPage - 1);
            }
        });

        reviewNextBtn.addEventListener('click', () => {
            if (reviewCurrentPage < reviewTotalPages) {
                fetchReviews(reviewCurrentPage + 1);
            }
        });

        insightPrevBtn.addEventListener('click', () => {
            if (insightCurrentPage > 1) {
                fetchInsights(insightCurrentPage - 1);
            }
        });

        insightNextBtn.addEventListener('click', () => {
            if (insightCurrentPage < insightTotalPages) {
                fetchInsights(insightCurrentPage + 1);
            }
        });

        document.getElementById('refreshBtn').addEventListener('click', () => {
            fetchReviews(reviewCurrentPage);
            fetchInsights(insightCurrentPage);
        });
        generateReviewBtn.addEventListener('click', generateAirbnbReview);
        exportCsvBtn.addEventListener('click', exportCsv);

        loadNewReviewsBtn.addEventListener('click', () => {
            fetchReviews(1);
            fetchInsights(1);
            hideNewReviewsAlert();
        });

        // Initial setup
        fetchReviews();
        fetchInsights();
    </script>
</body>
</html>
</INDEX_HTML_CODE>

This updated "index.html" file includes the following changes:

1. Removed the "Generate Insights" button as insights are now automatically generated when a new review is added.
2. Updated the insights table to include a "Count" column, showing how many reviews fall under each insight.
3. Modified the `createInsightTableRow` function to display the count for each insight.
4. Updated the `generateAirbnbReview` function to fetch both reviews and insights after generating a new review, as insights are now automatically generated.
5. Changed the WebSocket and API_URL to use port 5125 instead of 6376.

These changes reflect the new functionality implemented in the server and provide a user interface that matches the updated features.