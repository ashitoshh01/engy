
Single HTML Page Frontend:

1. HTML structure:
   - Header with title
   - Main content area with two columns:
     - Left column: Navigation bar (ul/li elements)
     - Right column: iframe for displaying agent dashboards

2. CSS styling:
   - Use flexbox for layout
   - Style the navigation bar and iframe

3. JavaScript functionality:
   - Fetch agent data from backend API
   - Dynamically populate navigation bar with agent names
   - Handle click events on navigation items to update iframe src

Pseudocode (HTML, CSS, and JavaScript):

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agent Hub</title>
    <style>
        /* CSS styles for layout, navigation, and iframe */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .container {
            display: flex;
            height: 100vh;
        }
        .nav {
            width: 200px;
            background-color: #f0f0f0;
            padding: 20px;
        }
        .nav ul {
            list-style-type: none;
            padding: 0;
        }
        .nav li {
            margin-bottom: 10px;
            cursor: pointer;
        }
        .content {
            flex-grow: 1;
        }
        iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav class="nav">
            <ul id="agentList"></ul>
        </nav>
        <main class="content">
            <iframe id="agentFrame" src=""></iframe>
        </main>
    </div>

    <script>
        // JavaScript to fetch agents and handle navigation
        document.addEventListener('DOMContentLoaded', () => {
            const agentList = document.getElementById('agentList');
            const agentFrame = document.getElementById('agentFrame');

            // Fetch agents from backend
            fetch('/get_agents')
                .then(response => response.json())
                .then(agents => {
                    // Populate navigation
                    for (const [name, url] of Object.entries(agents)) {
                        const li = document.createElement('li');
                        li.textContent = name;
                        li.onclick = () => {
                            agentFrame.src = url;
                        };
                        agentList.appendChild(li);
                    }
                    // Load first agent by default
                    if (Object.values(agents).length > 0) {
                        agentFrame.src = Object.values(agents)[0];
                    }
                });
        });
    </script>
</body>
</html>
```
